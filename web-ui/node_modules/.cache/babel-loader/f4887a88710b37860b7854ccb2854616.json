{"ast":null,"code":"var _jsxFileName = \"/Users/kimaustin/Documents/Portfolio/website_v2/web-ui/src/components/Home/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect, useCallBack } from 'react';\nimport { Container, Project } from './HomeElements.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  _s();\n\n  // const ref = useRef();\n  const [projectValue, setProjectValue] = useState(1);\n\n  const updateProjectValue = () => {\n    console.log(\"got to on-scroll\");\n    setProjectValue(projectValue + 1);\n  };\n\n  handleScroll = e => {\n    let element = e.target;\n\n    if (element.scrollHeight - element.scrollTop === element.clientHeight) {// do something at end of scroll\n    }\n  }; //   // The scroll listener\n  //   const handleScroll = useCallback(() => {\n  //     console.log(\"scrolling\")\n  //   }, [])\n  //   useEffect(() => {\n  //     fetchItemsFromServer().then(items => setItemsFromServer(items))\n  //   }, [])\n  //   // Attach the scroll listener to the div, exact same as before.\n  //   useEffect(() => {\n  //     const div = ref.current\n  //     div.addEventListener(\"scroll\", handleScroll)\n  //   }, [handleScroll])\n  //   // If we have no data yet, we render a loading indicator.\n  //   if (!itemsFromServer) {\n  //     return <LoadingIndicator />\n  // }\n  //   // Otherwise we render a scrollable div.\n  //   return (\n  //     <div className=\"scrollableContainer\" ref={ref}>\n  //       {itemsFromServer}\n  //     </div>\n  //   )\n\n\n  console.log(\"test console\");\n  return (\n    /*#__PURE__*/\n    // <div className=\"scrollableContainer\" ref={ref}>\n    //   <div className=\"content\">\n    //     When this content is taller than the parent, it scrolls.\n    //   </div>\n    // </div>\n    _jsxDEV(Container, {\n      onScroll: updateProjectValue,\n      children: /*#__PURE__*/_jsxDEV(Project, {\n        children: projectValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s(Home, \"VmDbg4m7ISjdeNyGH9tCp1ityNM=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/kimaustin/Documents/Portfolio/website_v2/web-ui/src/components/Home/index.js"],"names":["React","useState","useRef","useEffect","useCallBack","Container","Project","Home","projectValue","setProjectValue","updateProjectValue","console","log","handleScroll","e","element","target","scrollHeight","scrollTop","clientHeight"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,EAA6CC,WAA7C,QAA+D,OAA/D;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,mBAAnC;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AAEjB;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAC,CAAD,CAAhD;;AAEA,QAAMS,kBAAkB,GAAG,MAAM;AAC/BC,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAH,IAAAA,eAAe,CAACD,YAAY,GAAG,CAAhB,CAAf;AACD,GAHD;;AAKAK,EAAAA,YAAY,GAAGC,CAAC,IAAI;AAClB,QAAIC,OAAO,GAAGD,CAAC,CAACE,MAAhB;;AACA,QAAID,OAAO,CAACE,YAAR,GAAuBF,OAAO,CAACG,SAA/B,KAA6CH,OAAO,CAACI,YAAzD,EAAuE,CACrE;AACD;AACF,GALD,CAViB,CAgBnB;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEER,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AAEA;AAAA;AACE;AACA;AACA;AACA;AACA;AACA,YAAC,SAAD;AAAW,MAAA,QAAQ,EAAEF,kBAArB;AAAA,6BACE,QAAC,OAAD;AAAA,kBACGF;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AANF;AAYD,CAzDD;;GAAMD,I;;KAAAA,I;AA2DN,eAAeA,IAAf","sourcesContent":["import React, { useState, useRef, useEffect, useCallBack} from 'react';\nimport { Container, Project } from './HomeElements.js';\n\nconst Home = () => {\n\n  // const ref = useRef();\n  const [projectValue, setProjectValue] = useState(1);\n\n  const updateProjectValue = () => {\n    console.log(\"got to on-scroll\");\n    setProjectValue(projectValue + 1);\n  };\n\n  handleScroll = e => {\n    let element = e.target\n    if (element.scrollHeight - element.scrollTop === element.clientHeight) {\n      // do something at end of scroll\n    }\n  }\n//   // The scroll listener\n//   const handleScroll = useCallback(() => {\n//     console.log(\"scrolling\")\n//   }, [])\n\n//   useEffect(() => {\n//     fetchItemsFromServer().then(items => setItemsFromServer(items))\n//   }, [])\n\n//   // Attach the scroll listener to the div, exact same as before.\n//   useEffect(() => {\n//     const div = ref.current\n//     div.addEventListener(\"scroll\", handleScroll)\n//   }, [handleScroll])\n\n//   // If we have no data yet, we render a loading indicator.\n//   if (!itemsFromServer) {\n//     return <LoadingIndicator />\n// }\n\n//   // Otherwise we render a scrollable div.\n//   return (\n//     <div className=\"scrollableContainer\" ref={ref}>\n//       {itemsFromServer}\n//     </div>\n//   )\n\n  console.log(\"test console\");\n\n  return (\n    // <div className=\"scrollableContainer\" ref={ref}>\n    //   <div className=\"content\">\n    //     When this content is taller than the parent, it scrolls.\n    //   </div>\n    // </div>\n    <Container onScroll={updateProjectValue}>\n      <Project>\n        {projectValue}\n      </Project>\n    </Container>\n  )\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}