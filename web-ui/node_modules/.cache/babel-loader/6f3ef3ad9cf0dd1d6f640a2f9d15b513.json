{"ast":null,"code":"import{createStore,combineReducers}from'redux';//--------------------------SESSION--------------------------\nfunction save_session(sess){var session=Object.assign({},sess,{time:Date.now()});localStorage.setItem(\"session\",JSON.stringify(session));}//clears the session when a user logs out\nfunction clear_session(){localStorage.removeItem(\"session\");}//user session restore on page refresh (if still exists)\nfunction restore_session(){var session=localStorage.getItem(\"session\");if(!session){return null;}session=JSON.parse(session);var age=Date.now()-session.time;var hour=3600000;// one hour session expiration (in milliseconds)\nif(age<hour){return session;}else{return null;}}// user session; initial state = current session (if active)\nfunction session(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:restore_session();var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case'session/set':save_session(action.data);return action.data;case'session/clear':clear_session();return null;default:return state;}}//--------------------------PROJECTS--------------------------\nfunction projects(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case'projects/set':return action.data;default:return state;}}// function project_form(state = {}, action) {\n//     switch (action.type) {\n//     case 'project_form/set':\n//         return action.data;\n//     default:\n//         return state\n//     }\n// }\nfunction root_reducer(state,action){console.log(\"root_reducer\",state,action);var reducer=combineReducers({projects:projects,session:session});return reducer(state,action);}var store=createStore(root_reducer);export default store;","map":{"version":3,"sources":["/home/portfolio/website/web-ui/src/store.js"],"names":["createStore","combineReducers","save_session","sess","session","Object","assign","time","Date","now","localStorage","setItem","JSON","stringify","clear_session","removeItem","restore_session","getItem","parse","age","hour","state","action","type","data","projects","root_reducer","console","log","reducer","store"],"mappings":"AAAA,OAASA,WAAT,CAAsBC,eAAtB,KAA6C,OAA7C,CAEA;AACA,QAASC,CAAAA,YAAT,CAAsBC,IAAtB,CAA4B,CACxB,GAAIC,CAAAA,OAAO,CAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,CAAkBH,IAAlB,CAAwB,CAACI,IAAI,CAAEC,IAAI,CAACC,GAAL,EAAP,CAAxB,CAAd,CACAC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAgCC,IAAI,CAACC,SAAL,CAAeT,OAAf,CAAhC,EACD,CAED;AACA,QAASU,CAAAA,aAAT,EAAyB,CACvBJ,YAAY,CAACK,UAAb,CAAwB,SAAxB,EACD,CAED;AACA,QAASC,CAAAA,eAAT,EAA2B,CACzB,GAAIZ,CAAAA,OAAO,CAAGM,YAAY,CAACO,OAAb,CAAqB,SAArB,CAAd,CACA,GAAI,CAACb,OAAL,CAAc,CACZ,MAAO,KAAP,CACD,CACDA,OAAO,CAAGQ,IAAI,CAACM,KAAL,CAAWd,OAAX,CAAV,CACA,GAAIe,CAAAA,GAAG,CAAGX,IAAI,CAACC,GAAL,GAAaL,OAAO,CAACG,IAA/B,CACA,GAAIa,CAAAA,IAAI,CAAG,OAAX,CAAoB;AACpB,GAAID,GAAG,CAAGC,IAAV,CAAgB,CACd,MAAOhB,CAAAA,OAAP,CACD,CAFD,IAGK,CACH,MAAO,KAAP,CACD,CACF,CAED;AACA,QAASA,CAAAA,OAAT,EAAoD,IAAnCiB,CAAAA,KAAmC,2DAA3BL,eAAe,EAAY,IAARM,CAAAA,MAAQ,2CAClD,OAAQA,MAAM,CAACC,IAAf,EACE,IAAK,aAAL,CACErB,YAAY,CAACoB,MAAM,CAACE,IAAR,CAAZ,CACA,MAAOF,CAAAA,MAAM,CAACE,IAAd,CACF,IAAK,eAAL,CACEV,aAAa,GACb,MAAO,KAAP,CACF,QACE,MAAOO,CAAAA,KAAP,CARJ,CAUD,CAEH;AAEA,QAASI,CAAAA,QAAT,EAAsC,IAApBJ,CAAAA,KAAoB,2DAAZ,EAAY,IAARC,CAAAA,MAAQ,2CAClC,OAAQA,MAAM,CAACC,IAAf,EACA,IAAK,cAAL,CACI,MAAOD,CAAAA,MAAM,CAACE,IAAd,CACJ,QACI,MAAOH,CAAAA,KAAP,CAJJ,CAMH,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,QAASK,CAAAA,YAAT,CAAsBL,KAAtB,CAA6BC,MAA7B,CAAqC,CACjCK,OAAO,CAACC,GAAR,CAAY,cAAZ,CAA4BP,KAA5B,CAAmCC,MAAnC,EACA,GAAIO,CAAAA,OAAO,CAAG5B,eAAe,CAAC,CAC1BwB,QAAQ,CAARA,QAD0B,CAChBrB,OAAO,CAAPA,OADgB,CAAD,CAA7B,CAGA,MAAOyB,CAAAA,OAAO,CAACR,KAAD,CAAQC,MAAR,CAAd,CACH,CAED,GAAIQ,CAAAA,KAAK,CAAG9B,WAAW,CAAC0B,YAAD,CAAvB,CACA,cAAeI,CAAAA,KAAf","sourcesContent":["import { createStore, combineReducers } from 'redux';\n\n//--------------------------SESSION--------------------------\nfunction save_session(sess) {\n    let session = Object.assign({}, sess, {time: Date.now()});\n    localStorage.setItem(\"session\", JSON.stringify(session));\n  }\n  \n  //clears the session when a user logs out\n  function clear_session() {\n    localStorage.removeItem(\"session\");\n  }\n  \n  //user session restore on page refresh (if still exists)\n  function restore_session() {\n    let session = localStorage.getItem(\"session\");\n    if (!session) {\n      return null;\n    }\n    session = JSON.parse(session);\n    let age = Date.now() - session.time;\n    let hour = 3600000; // one hour session expiration (in milliseconds)\n    if (age < hour) {\n      return session;\n    }\n    else {\n      return null;\n    }\n  }\n  \n  // user session; initial state = current session (if active)\n  function session(state = restore_session(), action) {\n    switch (action.type) {\n      case 'session/set':\n        save_session(action.data);\n        return action.data;\n      case 'session/clear':\n        clear_session();\n        return null;\n      default:\n        return state;\n    }\n  }\n\n//--------------------------PROJECTS--------------------------\n\nfunction projects(state = [], action) {\n    switch (action.type) {\n    case 'projects/set':\n        return action.data;\n    default:\n        return state;\n    }\n}\n\n// function project_form(state = {}, action) {\n//     switch (action.type) {\n//     case 'project_form/set':\n//         return action.data;\n//     default:\n//         return state\n//     }\n// }\n\nfunction root_reducer(state, action) {\n    console.log(\"root_reducer\", state, action);\n    let reducer = combineReducers({\n        projects, session\n    });\n    return reducer(state, action);\n}\n\nlet store = createStore(root_reducer);\nexport default store;"]},"metadata":{},"sourceType":"module"}