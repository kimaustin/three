{"ast":null,"code":"var _jsxFileName = \"/home/portfolio/v2/web-ui/src/components/SideProjects/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { useInView, inView, InView } from 'react-intersection-observer';\nimport { connect } from \"react-redux\";\nimport { motion } from \"framer-motion\";\nimport { Link as LinkRouter } from 'react-router-dom';\nimport { Container, ImageContainer, WorkListContainer, Marker, ClickableArea, WorkItem, CaseStudy, WorkActions, WorkName, TagsContainer, ProjectTag, Details, VisitLink } from './SideProjectsElements';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SideProjects = ({\n  projects,\n  sideProjectsToggle\n}) => {\n  _s();\n\n  const [projectValue, setProjectValue] = useState(0);\n  const ListContainerRef = useRef();\n  let observerOptions = {\n    root: ListContainerRef.target,\n    rootMargin: '-49% 0px -50% 0px' // threshold: 0.1\n\n  };\n  const myRefs = [];\n  myRefs.push(useRef());\n  myRefs.push(useRef());\n  myRefs.push(useRef());\n  myRefs.push(useRef());\n  myRefs.push(useRef());\n  myRefs.push(useRef());\n  myRefs.push(useRef());\n  myRefs.push(useRef());\n  myRefs.push(useRef());\n  myRefs.push(useRef());\n  myRefs.push(useRef());\n  myRefs.push(useRef());\n  myRefs.push(useRef());\n  myRefs.push(useRef());\n  useEffect(() => {\n    // const observer = new IntersectionObserver((projectsList) => {\n    //     console.log(\"projects list\", projectsList);\n    //     console.log('root', projectsList.root);\n    // }, observerOptions)\n    for (var i = 0; i < myRefs.length; i++) {\n      // console.log('curr', myRefs[i].current);\n      // console.log('root', root);\n      const observer = new IntersectionObserver(projectsList => {\n        if (projectsList[0].isIntersecting) {\n          // console.log('scroll - current proj index', projectValue);\n          setProjectValue(projectsList[0].target.id);\n          projectsList[0].target.style.opacity = 1.0;\n        } else {\n          projectsList[0].target.style.opacity = 0.5;\n        }\n      }, observerOptions);\n      observer.observe(myRefs[i].current);\n    }\n  }, []);\n\n  const handleClick = index => {\n    var _myRefs$index$current;\n\n    // console.log('proj clicked', index);\n    // console.log('clicked - current proj index', projectValue);\n    (_myRefs$index$current = myRefs[index].current) === null || _myRefs$index$current === void 0 ? void 0 : _myRefs$index$current.scrollIntoView({\n      behavior: 'smooth'\n    }); // await timeout(1000); //for 1 sec delay\n    // setProjectValue(index);\n  };\n\n  let imgPreviews = projects.map((project, index) => {\n    return /*#__PURE__*/_jsxDEV(ImageContainer, {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: 'imgs/' + project.imgs[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this);\n  }); //MAIN PROJECTS LIST\n\n  let projects_list = projects.map((project, index) => {\n    // var refName = 'ref' + {project};\n    // const { ref: refName, inView: inView2, entry } = useInView({\n    //   rootMargin: '-210px'\n    // });\n    if (project.isCS) {\n      return /*#__PURE__*/_jsxDEV(WorkItem, {\n        id: index,\n        ref: myRefs[index],\n        onClick: () => handleClick(index),\n        currProj: projectValue,\n        thisProj: index,\n        children: [project.name, /*#__PURE__*/_jsxDEV(CaseStudy, {\n          children: \"CASE STUDY\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(WorkItem, {\n        id: index,\n        ref: myRefs[index],\n        onClick: () => handleClick(index),\n        currProj: projectValue,\n        thisProj: index,\n        children: project.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this) // <InView>\n      //   {({ inView, ref, entry }) => (\n      //     <WorkItem ref={refName} id={\"testID\" + project}>\n      //       {project.name}\n      //       <ImageHover heightVar={\"1\" + project.val + \"%\"}>\n      //         <img src={\"testProjCover\" + project.val + \".png\"} />\n      //       </ImageHover>  \n      //     </WorkItem>\n      //   )}\n      // </InView>\n      ;\n    }\n  }); // function ProjTags({ tag, key, index }) {\n  //   if (index < 5) {\n  //     return <ProjectTag>{tag} <br/></ProjectTag>;\n  //  }\n  // }\n  // let tagsDisplayed = projects[projectValue].tags.map((tag, index) => (\n  //   <ProjTags\n  //     tag={tag}\n  //     key={tag.id}\n  //     index={index}\n  //   />\n  // ));\n  // let visit_link = () => {\n  //   if (projects[projectValue].link.length == 1) {\n  //     return (\n  //       <VisitLink href={projects[projectValue].link[0]} target=\"_blank\">\n  //         Visit â†—\n  //       </VisitLink>\n  //     )\n  //   } else {\n  //     return;\n  //   }\n  // }\n  // let rightImageSource = \"imgs/\" + projects[projectValue].imgs[0];\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: imgPreviews\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SideProjects, \"sAqk4Fkei+Yz//3C8OLgfYpIySE=\");\n\n_c = SideProjects;\nexport default connect(({\n  projects,\n  sideProjectsToggle\n}) => ({\n  projects,\n  sideProjectsToggle\n}))(SideProjects);\n\nvar _c;\n\n$RefreshReg$(_c, \"SideProjects\");","map":{"version":3,"sources":["/home/portfolio/v2/web-ui/src/components/SideProjects/index.js"],"names":["React","useState","useEffect","useRef","useCallback","useInView","inView","InView","connect","motion","Link","LinkRouter","Container","ImageContainer","WorkListContainer","Marker","ClickableArea","WorkItem","CaseStudy","WorkActions","WorkName","TagsContainer","ProjectTag","Details","VisitLink","SideProjects","projects","sideProjectsToggle","projectValue","setProjectValue","ListContainerRef","observerOptions","root","target","rootMargin","myRefs","push","i","length","observer","IntersectionObserver","projectsList","isIntersecting","id","style","opacity","observe","current","handleClick","index","scrollIntoView","behavior","imgPreviews","map","project","imgs","projects_list","isCS","name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { useInView, inView, InView } from 'react-intersection-observer';\nimport { connect } from \"react-redux\";\nimport { motion } from \"framer-motion\";\nimport { Link as LinkRouter } from 'react-router-dom';\nimport {\n  Container,\n  ImageContainer,\n  WorkListContainer,\n  Marker,\n  ClickableArea,\n  WorkItem,\n  CaseStudy,\n  WorkActions,\n  WorkName,\n  TagsContainer,\n  ProjectTag,\n  Details,\n  VisitLink\n} from './SideProjectsElements';\n\nconst SideProjects = ({ projects, sideProjectsToggle }) => {\n\n  const [projectValue, setProjectValue] = useState(0);\n\n\n  const ListContainerRef = useRef();\n\n  let observerOptions = {\n    root: ListContainerRef.target,\n    rootMargin: '-49% 0px -50% 0px',\n    // threshold: 0.1\n  }\n\n  const myRefs = [];\n  myRefs.push(useRef());\n  myRefs.push(useRef());\n  myRefs.push(useRef());\n  myRefs.push(useRef());\n  myRefs.push(useRef());\n  myRefs.push(useRef());\n  myRefs.push(useRef());\n  myRefs.push(useRef());\n  myRefs.push(useRef());\n  myRefs.push(useRef());\n  myRefs.push(useRef());\n  myRefs.push(useRef());\n  myRefs.push(useRef());\n  myRefs.push(useRef());\n\n  useEffect (() => {\n      // const observer = new IntersectionObserver((projectsList) => {\n      //     console.log(\"projects list\", projectsList);\n      //     console.log('root', projectsList.root);\n      // }, observerOptions)\n      for (var i = 0; i < myRefs.length; i++) { \n          // console.log('curr', myRefs[i].current);\n          // console.log('root', root);\n          const observer = new IntersectionObserver((projectsList) => {\n            if (projectsList[0].isIntersecting) {\n              // console.log('scroll - current proj index', projectValue);\n              setProjectValue(projectsList[0].target.id);\n              projectsList[0].target.style.opacity = 1.0;\n            } else {\n              projectsList[0].target.style.opacity = 0.5;\n            }\n          }, observerOptions)\n          observer.observe(myRefs[i].current);\n      }\n  }, [])\n\n  const handleClick = (index) => {\n    // console.log('proj clicked', index);\n    // console.log('clicked - current proj index', projectValue);\n    myRefs[index].current?.scrollIntoView({ behavior: 'smooth' });\n    // await timeout(1000); //for 1 sec delay\n    // setProjectValue(index);\n  }\n\n  let imgPreviews = projects.map((project, index) => {\n    return (\n      <ImageContainer>\n        <img src={'imgs/' + project.imgs[0]}></img>\n      </ImageContainer>\n    )\n  })\n\n\n  //MAIN PROJECTS LIST\n  let projects_list = projects.map((project, index) => {\n\n    // var refName = 'ref' + {project};\n    // const { ref: refName, inView: inView2, entry } = useInView({\n    //   rootMargin: '-210px'\n    // });\n\n    if (project.isCS) {\n      return (\n        <WorkItem id={index} ref={myRefs[index]} onClick={()=> handleClick(index)} currProj={projectValue} thisProj={index}>\n          {project.name}\n          {/* <Fake>{projectValue}</Fake> */}\n          <CaseStudy>CASE STUDY</CaseStudy>\n        </WorkItem>\n      )\n    } else {\n      return (\n        <WorkItem id={index} ref={myRefs[index]} onClick={()=> handleClick(index)} currProj={projectValue} thisProj={index}>\n          {project.name}\n          {/* <Fake>{projectValue}</Fake> */}\n        </WorkItem>\n        // <InView>\n        //   {({ inView, ref, entry }) => (\n        //     <WorkItem ref={refName} id={\"testID\" + project}>\n        //       {project.name}\n        //       <ImageHover heightVar={\"1\" + project.val + \"%\"}>\n        //         <img src={\"testProjCover\" + project.val + \".png\"} />\n        //       </ImageHover>  \n        //     </WorkItem>\n        //   )}\n        // </InView>\n      )\n    }\n  });\n\n  // function ProjTags({ tag, key, index }) {\n  //   if (index < 5) {\n  //     return <ProjectTag>{tag} <br/></ProjectTag>;\n  //  }\n  // }\n\n  // let tagsDisplayed = projects[projectValue].tags.map((tag, index) => (\n  //   <ProjTags\n  //     tag={tag}\n  //     key={tag.id}\n  //     index={index}\n  //   />\n  // ));\n\n  // let visit_link = () => {\n  //   if (projects[projectValue].link.length == 1) {\n  //     return (\n  //       <VisitLink href={projects[projectValue].link[0]} target=\"_blank\">\n  //         Visit â†—\n  //       </VisitLink>\n  //     )\n  //   } else {\n  //     return;\n  //   }\n  // }\n\n  // let rightImageSource = \"imgs/\" + projects[projectValue].imgs[0];\n\n\n  return (\n    <Container>\n      {imgPreviews}\n    </Container>\n  )\n}\n\nexport default connect(({ projects, sideProjectsToggle }) => ({ projects, sideProjectsToggle }))(SideProjects);\n\n"]},"metadata":{},"sourceType":"module"}